<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
	<classpathentry kind="src" path="ServerPythonInterpreterPlugin/src-common"/>
	<classpathentry kind="src" path="ServerPythonInterpreterPlugin/src-test"/>
	<classpathentry kind="lib" path="ServerPythonInterpreterPlugin/lib-common/java-websocket-1.4.0.jar"/>
	<classpathentry kind="lib" path="ServerPythonInterpreterPlugin/lib-common/jython-standalone-2.7.2.jar"/>
	<classpathentry kind="lib" path="ServerPythonInterpreterPlugin/lib-spigot/spigot-1.15.2.jar"/>
	<classpathentry kind="output" path="ServerPythonInterpreterPlugin/bin"/>
</classpath>
# Taking kilometers input from the user
kilometers = float(input("Enter value in kilometers: "))

# conversion factor
conv_fac = 0.621371

# calculate miles
miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' %(kilometers,miles))
# Program to generate a random number between 0 and 9

# importing the random module
import random

print(random.randint(0,9))
# Python program to check if the input number is odd or even.
# A number is even if division by 2 gives a remainder of 0.
# If the remainder is 1, it is an odd number.

num = int(input("Enter a number: "))
if (num % 2) == 0:
   print("{0} is Even".format(num))
else:
   print("{0} is Odd".format(num))

class Student:
    def __init__(self, roll_number, name, age, grade):
        self.roll_number = roll_number
        self.name = name
        self.age = age
        self.grade = grade

    def __str__(self):
        return f"Roll Number: {self.roll_number}, Name: {self.name}, Age: {self.age}, Grade: {self.grade}"

class StudentManagementSystem:
    def __init__(self):
        self.students = []

    def add_student(self, student):
        self.students.append(student)
        print(f"Student {student.name} added to the system.")

    def view_students(self):
        if not self.students:
            print("No students in the system.")
        else:
            print("Student Records:")
            for student in self.students:
                print(student)

    def update_student(self, roll_number, new_name, new_age, new_grade):
        for student in self.students:
            if student.roll_number == roll_number:
                student.name = new_name
                student.age = new_age
                student.grade = new_grade
                print(f"Student {student.name}'s record updated.")
                return
        print(f"Student with roll number {roll_number} not found.")

    def delete_student(self, roll_number):
        for student in self.students:
            if student.roll_number == roll_number:
                self.students.remove(student)
                print(f"Student {student.name} removed from the system.")
                return
        print(f"Student with roll number {roll_number} not found.")

def main():
    student_system = StudentManagementSystem()

    while True:
        print("\nStudent Management System Menu:")
        print("1. Add student")
        print("2. View students")
        print("3. Update student record")
        print("4. Delete student record")
        print("5. Exit")

        choice = input("Enter your choice (1/2/3/4/5): ")

        if choice == "1":
            roll_number = int(input("Enter roll number: "))
            name = input("Enter student name: ")
            age = int(input("Enter student age: "))
            grade = input("Enter student grade: ")
            student = Student(roll_number, name, age, grade)
            student_system.add_student(student)
        elif choice == "2":
            student_system.view_students()
        elif choice == "3":
            roll_number = int(input("Enter roll number of the student to update: "))
            new_name = input("Enter new student name: ")
            new_age = int(input("Enter new student age: "))
            new_grade = input("Enter new student grade: ")
            student_system.update_student(roll_number, new_name, new_age, new_grade)
        elif choice == "4":
            roll_number = int(input("Enter roll number of the student to delete: "))
            student_system.delete_student(roll_number)
        elif choice == "5":
            print("Thank you for using the Student Management System. Goodbye!")
            break
        else:
            print("Invalid choice. Please select a valid option (1/2/3/4/5).")

if __name__ == "__main__":
    main()

